/*
 * pwm.h
 *
 *  Created on: Apr 3, 2017
 *      Author: weeyizhi
 */

#ifndef PWM_H
#define PWM_H

#include <stdio.h>
#include <inttypes.h>
#include <stdlib.h>
#include <assert.h>

//configure PWM, make sure to change pwm_gen.v too
#define MIN_DUTY	0.4
#define MAX_DUTY	0.9
#define SLOPE 		(MAX_DUTY - MIN_DUTY)

//configure controller dead zone
#define CENTER		128	//value from controller when at center
#define DEAD_ZONE   2	//center plus minus this value is still considered dead

#define APB_RD_ADDR 0x40050000;
#define APB_WR_ADDR 0x40050004;

#define EN_R_MASK	0x1
#define DIR_R_MASK	0x2			//1 is forward
#define EN_L_MASK	0x4
#define DIR_L_MASK	0x8

#define PWM_R_MASK	0xFF00
#define PWM_R_SHIFT	8
#define PWM_L_MASK	0xFF0000
#define PWM_L_SHIFT	16

/////NOTE//////////
/*
0th-3rd bits are control (en and dir)
8th-15th bits are PWMDuty for R
16th-23rd bits are PWMDuty for L
*/
////////////////////


// Set the H-Bridge EN and DIR values based on controller
uint32_t setBridgeCtrl(uint8_t en_R, uint8_t dir_R, uint8_t en_L, uint8_t dir_L);

// Set the duty of PWM
// The actual duty cycle in percent is (duty/2^8)*100%
uint32_t setPWMDuty(uint8_t duty_R, uint8_t duty_L);

// calculate duty of PWM (calibrated)
uint8_t getDuty(uint8_t uncalibrate_in);

uint8_t getDir(uint8_t uncalibrate_in);

uint8_t getEn(uint8_t uncalibrate_in);

#endif
